// <auto-generated />
using System;
using Bonds.DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bonds.DataProvider.Migrations
{
    [DbContext(typeof(BondsContext))]
    [Migration("20241116132641_OfferDate")]
    partial class OfferDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bonds.DataProvider.Entities.BondEntity", b =>
                {
                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<string>("BoardId")
                        .HasColumnType("text");

                    b.Property<string>("BoardName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BuybackDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BuybackPrice")
                        .HasColumnType("text");

                    b.Property<double?>("CouponPercent")
                        .HasColumnType("double precision");

                    b.Property<int?>("CouponPeriod")
                        .HasColumnType("integer");

                    b.Property<double?>("CouponValue")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("FACEUNIT")
                        .HasColumnType("text");

                    b.Property<double?>("FaceValue")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsFloater")
                        .HasColumnType("boolean");

                    b.Property<long?>("IssueSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LatName")
                        .HasColumnType("text");

                    b.Property<long?>("LotSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MatDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NextCouponDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PrevDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("PrevLegalClosePrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("PrevPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("PrevWaPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("RegNumber")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("SecName")
                        .HasColumnType("text");

                    b.Property<string>("SecType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("YieldAtPrevWaPrice")
                        .HasColumnType("double precision");

                    b.HasKey("ISIN");

                    b.ToTable("Bonds");
                });

            modelBuilder.Entity("Bonds.DataProvider.Entities.BondExtendedEntity", b =>
                {
                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<long?>("EmitterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ISIN");

                    b.ToTable("BondsExtended");
                });
#pragma warning restore 612, 618
        }
    }
}
