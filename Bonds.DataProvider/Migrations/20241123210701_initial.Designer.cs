// <auto-generated />
using System;
using Bonds.DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bonds.DataProvider.Migrations
{
    [DbContext(typeof(BondsContext))]
    [Migration("20241123210701_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bonds.DataProvider.Entities.BondExtendedEntity", b =>
                {
                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<long?>("EmitterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ISIN");

                    b.ToTable("BondsExtended");
                });

            modelBuilder.Entity("Bonds.DataProvider.Entities.BondSecurityEntity", b =>
                {
                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<string>("BoardId")
                        .HasColumnType("text");

                    b.Property<string>("BoardName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BuybackDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BuybackPrice")
                        .HasColumnType("text");

                    b.Property<float?>("CouponPercent")
                        .HasColumnType("real");

                    b.Property<int>("CouponPeriod")
                        .HasColumnType("integer");

                    b.Property<float?>("CouponValue")
                        .HasColumnType("real");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("FACEUNIT")
                        .HasColumnType("text");

                    b.Property<float?>("FaceValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsFloater")
                        .HasColumnType("boolean");

                    b.Property<long?>("IssueSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LatName")
                        .HasColumnType("text");

                    b.Property<long?>("LotSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MatDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NextCouponDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PrevDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("PrevLegalClosePrice")
                        .HasColumnType("real");

                    b.Property<float?>("PrevPrice")
                        .HasColumnType("real");

                    b.Property<float?>("PrevWaPrice")
                        .HasColumnType("real");

                    b.Property<string>("RegNumber")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("SecName")
                        .HasColumnType("text");

                    b.Property<string>("SecType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("YieldAtPrevWaPrice")
                        .HasColumnType("real");

                    b.HasKey("ISIN");

                    b.ToTable("BondsSecurities");
                });

            modelBuilder.Entity("Bonds.DataProvider.Entities.BondsMarketdataEntity", b =>
                {
                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<double?>("Ask")
                        .HasColumnType("double precision");

                    b.Property<double?>("Bid")
                        .HasColumnType("double precision");

                    b.Property<double>("Change")
                        .HasColumnType("double precision");

                    b.Property<double>("CouponValue")
                        .HasColumnType("double precision");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("High")
                        .HasColumnType("double precision");

                    b.Property<double>("Last")
                        .HasColumnType("double precision");

                    b.Property<double>("Low")
                        .HasColumnType("double precision");

                    b.Property<double>("MarketPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("MarketPriceToday")
                        .HasColumnType("double precision");

                    b.Property<double>("Open")
                        .HasColumnType("double precision");

                    b.Property<double>("PriceMinusPrevWaPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Qty")
                        .HasColumnType("double precision");

                    b.Property<double>("SeqNum")
                        .HasColumnType("double precision");

                    b.Property<double?>("Spread")
                        .HasColumnType("double precision");

                    b.Property<long>("TradesCount")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("UpdateTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ValToday")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VolToday")
                        .HasColumnType("bigint");

                    b.Property<double>("WaPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Yield")
                        .HasColumnType("double precision");

                    b.Property<double>("YieldAtWaPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("YieldLastCoupon")
                        .HasColumnType("double precision");

                    b.HasKey("ISIN");

                    b.ToTable("BondsMarketdata");
                });
#pragma warning restore 612, 618
        }
    }
}
