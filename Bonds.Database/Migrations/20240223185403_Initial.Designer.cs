// <auto-generated />
using System;
using Bonds.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bonds.Database.Migrations
{
    [DbContext(typeof(BondsContext))]
    [Migration("20240223185403_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bonds.Database.Entities.BondQuoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BuybackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BuybackPrice")
                        .HasColumnType("text");

                    b.Property<double?>("CouponPercent")
                        .HasColumnType("double precision");

                    b.Property<int?>("CouponPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("FaceUnit")
                        .HasColumnType("text");

                    b.Property<double?>("FaceValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<long?>("IssueSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LatName")
                        .HasColumnType("text");

                    b.Property<long?>("LotSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MatDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PrevDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("PrevLegalClosePrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("PrevPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("RegNumber")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("SecName")
                        .HasColumnType("text");

                    b.Property<string>("SecType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("BondQuotes", (string)null);
                });

            modelBuilder.Entity("Bonds.Database.Entities.BondTradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BuySell")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "BUYSELL");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "QUANTITY");

                    b.Property<string>("SecId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "SECID");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "TRADETIME_GRP");

                    b.Property<long>("TradeId")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "TRADENO");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "VALUE");

                    b.Property<double>("Yield")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "YIELD");

                    b.HasKey("Id");

                    b.ToTable("BondTrades", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
